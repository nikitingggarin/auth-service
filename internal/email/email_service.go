package email

import (
	"fmt"
	"log"
	"net/smtp"
	"os"
	"strconv"
)

type Config struct {
	SMTPHost     string
	SMTPPort     int
	SMTPUsername string
	SMTPPassword string
	FromEmail    string
	FromName     string
}

type EmailService struct {
	config     Config
	workerPool *WorkerPool
}

func NewEmailService() *EmailService {
	port, _ := strconv.Atoi(getEnv("SMTP_PORT", ""))

	return &EmailService{
		config: Config{
			SMTPHost:     getEnv("SMTP_HOST", ""),
			SMTPPort:     port,
			SMTPUsername: getEnv("SMTP_USERNAME", ""),
			SMTPPassword: getEnv("SMTP_PASSWORD", ""),
			FromEmail:    getEnv("FROM_EMAIL", ""),
			FromName:     getEnv("FROM_NAME", ""),
		},
		workerPool: NewWorkerPool(5), // 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
	}
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

// SendWelcomeEmail –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ welcome email
func (s *EmailService) SendWelcomeEmail(email, userName string) error {
	subject := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!"

	// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π email
	body := fmt.Sprintf(`
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!

–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Auth Servise
`, userName)

	log.Printf("üìß Starting to send welcome email to: %s", email)

	if err := s.sendEmail(email, subject, body); err != nil {
		return fmt.Errorf("failed to send welcome email: %w", err)
	}

	log.Printf("‚úÖ Welcome email sent successfully to: %s", email)
	return nil
}

// sendEmail –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ SMTP
func (s *EmailService) sendEmail(to, subject, body string) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := s.buildMessage(to, subject, body)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	auth := smtp.PlainAuth("", s.config.SMTPUsername, s.config.SMTPPassword, s.config.SMTPHost)

	// –ê–¥—Ä–µ—Å SMTP —Å–µ—Ä–≤–µ—Ä–∞
	addr := fmt.Sprintf("%s:%d", s.config.SMTPHost, s.config.SMTPPort)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ email
	return smtp.SendMail(addr, auth, s.config.FromEmail, []string{to}, []byte(message))
}

// buildMessage —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç email —Å–æ–æ–±—â–µ–Ω–∏–µ
func (s *EmailService) buildMessage(to, subject, body string) string {
	return fmt.Sprintf("From: %s <%s>\r\nTo: %s\r\nSubject: %s\r\n\r\n%s",
		s.config.FromName,
		s.config.FromEmail,
		to,
		subject,
		body)
}

// SendWelcomeEmailAsync –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É email –≤ —Ñ–æ–Ω–µ
func (s *EmailService) SendWelcomeEmailAsync(email, userName string) {
    go func() {
        s.workerPool.Acquire() // –ó–∞–Ω–∏–º–∞–µ–º –≤–æ—Ä–∫–µ—Ä–∞
        defer s.workerPool.Release() // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä–∞
        
        if err := s.SendWelcomeEmail(email, userName); err != nil {
            log.Printf("‚ùå Failed to send welcome email to %s: %v", email, err)
        }
    }()
}
