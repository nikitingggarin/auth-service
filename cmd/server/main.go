package main

import (
	"context"
	"log"
	"net/http"
	"net/url"
	"os"
	"os/signal"
	"syscall"
	"time"

	"auth-service/internal/auth"
	"auth-service/internal/config"
	"auth-service/internal/handler"
	"auth-service/internal/middleware"
	"auth-service/internal/repository/postgres"
	"auth-service/internal/service"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
)

// maskDBURL –º–∞—Å–∫–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –≤ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func maskDBURL(dbURL string) string {
	parsed, err := url.Parse(dbURL)
	if err != nil {
		return "invalid-db-url"
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å - –º–∞—Å–∫–∏—Ä—É–µ–º –µ–≥–æ
	if parsed.User != nil {
		if _, hasPassword := parsed.User.Password(); hasPassword {
			// –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ ****
			parsed.User = url.UserPassword(parsed.User.Username(), "****")
		}
	}

	return parsed.String()
}

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
	if err := godotenv.Load(); err != nil {
		log.Printf("‚ö†Ô∏è Failed to load .env file: %v", err)
		log.Println("Using default configuration")
	} else {
		log.Println("‚úÖ .env file loaded successfully")
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg := config.Load()

	// –õ–æ–≥–∏—Ä—É–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	maskedDBURL := maskDBURL(cfg.DBURL)
	log.Printf("Config loaded - DBURL: %s", maskedDBURL)

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
	ctx := context.Background()
	dbPool, err := postgres.NewPool(ctx, &postgres.Config{
		URL: cfg.DBURL,
	})
	if err != nil {
		log.Fatal("Failed to connect to database")
	}
	defer dbPool.Close()

	log.Println("‚úÖ Database connection established")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JWT —Å–µ—Ä–≤–∏—Å–∞
	jwtService := auth.NewJWTService(cfg.JWTSecret, cfg.JWTExpiration)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
	userRepo := postgres.NewUserRepository(dbPool)
	authService := service.NewAuthService(userRepo, jwtService)
	authHandler := handler.NewAuthHandler(authService)

	// –°–æ–∑–¥–∞–Ω–∏–µ Gin —Ä–æ—É—Ç–µ—Ä–∞
	r := gin.Default()

	// Health check
	r.GET("/health", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"status":  "OK",
			"message": "Auth service is running!",
			"port":    cfg.ServerPort,
		})
	})

	// Concurrency test endpoint
	r.GET("/concurrent", func(c *gin.Context) {
		// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î)
		time.Sleep(2 * time.Second)

		c.JSON(200, gin.H{
			"message":      "Concurrent request processed",
			"time":         time.Now().Format(time.RFC3339),
			"goroutine_id": getGoroutineID(), // –ü–æ–∫–∞–∂–µ–º ID –≥–æ—Ä—É—Ç–∏–Ω—ã
		})
	})

	// Auth routes
	authGroup := r.Group("/auth")
	{
		authGroup.POST("/register", authHandler.Register)
		authGroup.POST("/login", authHandler.Login)
	}

	// Protected routes (require JWT token)
	protectedGroup := r.Group("/api")
	protectedGroup.Use(middleware.AuthMiddleware(jwtService))
	{
		protectedGroup.GET("/profile", authHandler.GetProfile)
	}

	// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
	srv := &http.Server{
		Addr:    ":" + cfg.ServerPort,
		Handler: r,
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π goroutine
	go func() {
		log.Printf("üöÄ Server starting on :%s...", cfg.ServerPort)
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Failed to start server: %v", err)
		}
	}()

	// –ö–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ OS
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-quit
	log.Println("üõë Shutting down server...")

	// Graceful shutdown —Å —Ç–∞–π–º–∞—É—Ç–æ–º 30 —Å–µ–∫—É–Ω–¥
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}

	log.Println("‚úÖ Server exited properly")
}